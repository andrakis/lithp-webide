% Provides an interface to the jQuery object.
(
	(import lists)
	(import class)

	(define 'JQUERY_TOOLKIT' true)

	(var JQueryJSObj (atom nil))
	(var JQueryOnLoadCallbacks (list))

	% Called by the JavaScript editor when code is run
	(def onJQuery (scope #JQ :: (
		(set JQueryJSObj (get JQ))
		(each JQueryOnLoadCallbacks #CB :: (
			(call CB)
		))
	)))

	% Used to add a callback when the above function is called.
	% Essentially, this is your $(function() { }) callback.
	(def jqueryOnLoad (scope #Callback :: (
		(set JQueryOnLoadCallbacks (++ JQueryOnLoadCallbacks (list Callback)))
		(atom ok)
	)))

	(export-global onJQuery/1 jqueryOnLoad/1)

	% Public API
	(def jQuery/1 #Selector :: (
		(jQueryClass (jquery-init Selector))
	))
	(def jQuery/2 #Selector,Context :: (
		(jQueryClass (jquery-init Selector (unclass Context)))
	))
	(def jQuery/3 #Selector,Context,Root :: (
		(jQueryClass (jquery-init Selector (unclass Context) Root))
	))

	(export-global jQuery/1 jQuery/2 jQuery/3)

	% Internal API
	(def jquery-init/* #Args :: (
		(js-invoke JQueryJSObj Args)
	))

	(def jQueryClass #JQueryResult :: (
		(new JQueryClass JQueryResult)
	))

	% Grabs the jQuery object from the class, if it is a class.
	(def unclass #JQ :: (
		(if (== dict (typeof JQ)) (
			(member-call JQ getTarget)
		) (else ((JQ))))
	))

	% The JQuery class
	(var JQueryClass (class 'JQueryClass'
		(tuple (class-init) #Self,From :: (
			(member-set Self target From)
		))

		% Public API
		(tuple append #Self,Obj :: (
		    (member-call Self call append (list (unclass Obj)))
		))
		(tuple bind #Self,Event,Handler :: (
			(member-call Self call bind (list Event (js-bridge Handler)))
		))
		(tuple getCss #Self :: (
			(member-call Self invoke css (list))
		))
		(tuple getValue #Self :: (
			(member-call Self invoke val (list))
		))
		(tuple remove #Self :: (
			(member-call Self call remove (list))
		))
		(tuple setCss #Self,Css :: (
			(member-call Self call css (list Css))
		))
		(tuple setValue #Self,Value :: (
			(member-call Self call val (list Value))
		))

		% Internal use
		(tuple call #Self,Member,Args :: (
			(new JQueryClass (member-call Self invoke Member Args))
		))
		(tuple invoke #Self,Member,Args :: (
			(js-apply (member-get Self target) (member-call Self getTargetMember Member) Args)
		))
		(tuple invoke-immediate #Self,Search :: (
			(invoke (member-get Self target) (list Search))
		))
		(tuple getTarget #Self :: (
			(member-get Self target)
		))
		(tuple getTargetMember #Self,Member :: (
			(dict-get (member-call Self getTarget) Member)
		))
	))
)

% Provides a basic interface to HTML objects in the document.
% You must invoke onReady/1 with the "body" element.
(
	(define 'HTML_TOOLKIT' true)
	(import lists)

	(var Document (atom nil))
	(var Window   (atom nil))
	(var HtmlToolkitOnReady (list))
	(var Ready false)
	(def onReady/* (scope #Values :: (
		(set Document (index Values 0))
		(set Window   (index Values 1))
		(set Ready true)
		(each HtmlToolkitOnReady #Callback :: (
			(call Callback)
		))
	)))

	(export-global onReady/*)

	(def htmlOnLoad (scope #Callback :: (
		(if (== false Ready) (
			(set HtmlToolkitOnReady (++
				 HtmlToolkitOnReady (list Callback)
			))
		) (else (
			(call Callback)
		)))
		(atom ok)
	)))

	(export-global htmlOnLoad/1)

	(def getElementById (scope #Id :: (
		(doc-apply getElementById (list Id))
	)))

	(def prompt (scope #Question,Callback :: (
		(var Result (invoke Window prompt Question))
		(call Callback Result)
	)))

	(export-global prompt/2)

	(def doc-apply (scope #Member,Args :: (
		(js-apply Document (dict-get Document Member) Args)
	)))

	(def getDoc (scope # :: ((Document))))
	(export-global getDoc/0)

	(def getWindow (scope # :: ((Window))))
	(export-global getWindow/0)

	(def postParentMessage #Message :: (
		(var Window (getWindow))
		(js-apply Window (dict-get Window "LithpPostMessage") (list Message))
	))
	(export-global postParentMessage/1)
)
